<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="textBox2.Text" xml:space="preserve">
    <value>These demos make use of IronPython, a .NET implementation of the Python scripting/programming language.  FileHelpers already comes with the necessary DLLs, but if you wish to download IronPython separately, you can find it at: http://www.codeplex.com/IronPython/

The demo scripts/programs also require the USPS CIN List file from the DEPS service on the US Postal Service's FAST web portal.  This demonstrates the usage of FileHelpers on a real-world data file; however, this file cannot be redistributed due to copyright restrictions.  It is freely available from the USPS FAST DEPS website at https://fast.usps.com; no login is necessary, simply use the menus to choose "Resources", then "Drop-Ship Product File Download", then the "CIN List File".  Once the file is finished downloading, unzip it into this demo's directory.  (It should contain a single file called "CINLIST")

Once you've added the CINLIST file to the demo directory, go ahead and launch the pure Python demo by running "demo.bat", or launch the IronPython Hosting demo by running Demo.IronPython.Hosting.exe</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAAAAAAAACoCAAAJgAAABAQAAAAAAAAaAUAAM4IAAAoAAAAIAAAAEAAAAABAAgAAAAAAAAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAAKCgoADAsKAA0NDQASEhIAFRUVABkZGQAeHh4AIRoWACIb
        FwAjHRkAJB0ZACQeGgAmHxsAJiAcACghHQAoIh4AICAgACQkJAAqJCAALCUhAC0mIgAoKCgALCwsAC4u
        LgA4LScAMDAwADU1NQA5OTkAPT09AFUyAQBWNAIAVzUEAFg1BABZNwgAWTkJAFo4CABaOQoAWjoKAFw6
        CgBbOgwAXjwNAFw8DgBdPRAAXj4QAF4/EgBHOzUAST43AF5AEwBhQBIAZEMWAGVFGABoRxsAaEccAGRI
        HgBoSBwAT0M8AGZKIQBnTCUAakogAGpQKgB0Vi4AbVUwAHZYMABwWDUAfF86AEFBQQBFRUUASUlJAExM
        TABVSUIAWUxEAFlORwBeUksAUVFRAFVVVQBYWFgAXV1dAGNVTQBiVk8AZVlSAHxqTQB+bVEAYGBgAGRk
        ZABoaGgAbGxsAG5ubgBwcHAAdHR0AHl5eQB8fHwAfn5+AIRoRQCFaUYAhmpIAItwUACPdVYAgnNaAIN0
        WwCWfGAAhXpyAJuDaACNg3AAkId2AJKKeQCgiW8AoYlxAKWOdwCnkHkAqZJ8AHugvACAgIAAgoKCAISE
        hACGhoYAiIiIAIqKigCMjIwAjo6OAJuWiwCcmY4AkJCQAJKSkgCVlZUAnZqQAJqamgCdnZ0ArJaAAK2Y
        gwCvmYUAoZWPALCahgCwnIgAs5+MAKOWkACkl5EApZiSAKaalAChn5YAtKCOAKKgmQCioZoAo6KbAKSj
        nQClpZ4Ar6OeALekkwCwpJ4Au6mZAL6unwCBpL4AoaGhAKamoACmp6IApaWlAKeoowCoqaUAqaunAK6o
        pwCqqqoArqioAKqsqACurq4AsKahALitpwCwqqkAv7ChAK+zswCxsbEAsba2ALW1tQC0u70Atby/ALq6
        ugC8ubsAvLy8AMKzpQDFt6sAxrisAMS9ugDEwL4AzsO6ANHHvgCIqMIAjKvEAI+txQCSr8cAmLLJALe/
        xAC5wcYAusLIALrEyQC7xcsAvMbNAL7I0AC/ytIAvsvaAMHBwQDFxcUAxcbNAMnJyQDNzc0A1czEANHQ
        zwDAzNsA0dHRANTT0gDV1NMA1dXVANjW1QDe2NUA2dnZAN3c2wDd3NwA4NvYAODc3ADi3t0A4N/eAMjT
        4ADK1OAAzNXiANDY5ADU3OcA2d7mAOLf4ADg4OAA4uDgAOPi4QDi4uIA5eLhAOXk4wDk5OQA5uXkAOfl
        5gDm5uYA6OXlAOno5wDp6ekA6+rpAOrq6gDs6+sA7OzsAO7t7ADt7O8A7u7uAObp8ADq7fMA7e3wAO/w
        9ADx8fEA9fX1APn5+QD8/PwAAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABqNyIiIiIiIiIiIiIiIiIiIiIiIiIiIiAgLFIAAAAA
        PThlbW5ubm5ubm5ubm5ubm5ubm5ubm5ubmxgJS4AAEE+grfn7e3t7e3t7e3t7e3t7e3t7e3t7e3t2Jds
        KD95KG/U997d3d3c3Nzc3Nzc3Nzc3Nzc3N3d3d3g+rJiIDpAlvjOxsbGxphwu3BwvXBwvHCYunC5zs7O
        zs7f7W8lH16z98mnoKKip6enp6enp6enp6enp6enp6ensOH5hSofX7TTpcvP0dPV2+To7vD09vLu6uXb
        1tXT0M22k/mFKiBftKbL0NPV1+Pm7O/z9vv79vTx7unj29XT0c+L+YUqIF+0lZmcoaqsr8fIysvP0dHP
        y8rHr6qhmX98dWb1hSohX7SLREZNW1pbc3h9gJycnpyZf3x1XVpWTktEUfWFKiFftIseRUvLfFlbcnV7
        fX19fXt3c1xaVlRMRUNQ9YUqIV+0ihxGc+mxV1ddcXFyc3RzcVxaWVZOTEZDHEr1hSoiX7SKGFn+y+bT
        VKT0f1paWllZV1ZUTUtFQxwYSfWFKiNftIkSTZwdTPtNTXbz01tVVFROTUtGRB4cGBJH9YUqI1+0iAYI
        Q4Db11RVVVj29lZLS0ZFQx4cGxcSBjn1hSokX7SEBkPv1YBVVFWZ+8hMQ0MeHh0cGRcSBwUDMPWFKiZf
        tIQSTPxUWshOpOZ0VlYeGxkXFxMIBwUEAf8v9YUqJ1+0hBNLz/z9105WVlVWVlYdCAcHBgQCAf//BS/1
        hSopX7SEF01O0X9VVFRVVVZWVldMEwQB/wEEGU1NL/WFKilftIQbVVVcWFZWVlZXWFhYWVlZWFZWWFpa
        W1Qv9YUqK1+0hB1ZWVlaWlpaWltbW1tcXFxdXXFxcnJzVi/1hSorX7SEGVxdXXFxcXJyc3N0dHR1dXZ2
        d3d4eHhXL/WFKjFCqKUDWHV2dnZ3d3d4eHh4eHh7e3t7fHx8eBlI8YElZDOD2U8JFRYVFBQREREREBAP
        Dw8ODg0NDAsKGrW4ZycAI2GU2uTi4uLi4uLi4uLi4uLi4uLi4uLi4uLrzIE1UwBoIF5vh42NjY2NjY2N
        jY2NjY2NjY2NjY2NjYZrPDsAAABpKSU0ODg4ODg4ODg4ODg4ODg4ODg4ODg2Mi1jAAAAAAAAmnp6enp6
        enp+fn6Mjo+QkZKam52enwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////+AAAAPAAAABgAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIAAAACAAAABwAAAA/AAAD///////////ygAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAADw8PABAQEAATExMAGBgYACIiIgApKSkALCwsAC4uLgAwLCoANjIxADw5
        NwA4ODgAPT09AD8/PwBdOwwAXDwMAF08DQBdPQ4AXj4QAF8/EQBfQBIAYEETAGxRKQBzXTsAc108AEJC
        QgBGQ0AASEVDAEpHRQBMTEwAWFJPAFVVVQBXV1cAXFZTAFlWVABdV1QAXldUAF1YVQBeWFUAX1lWAF9a
        VwBYWFgAX19fAGBZVQBgWlcAYVtYAGJcWQB9akwAaGFeAGliXwB/bVEAYGBgAGVlZQBnZ2cAaGhoAGpq
        agBsbGwAbW1tAG9vbwBzbGkAeXBsAHBwcABycnIAdnZ2AHd3dwB9dnIAeXl5AHx8fAB+fn4Ag2hFAIlu
        TQCOdVUAgnJZAJJ5WwCWfmIAlIx8AJSMfQCUjX4AlY5/AKGLcgChi3MAootzAKKMcwCAgIAAgYGBAIKC
        ggCDg4MAhYWFAIeHhwCIiIgAioqKAIyMjACOjo4Al5GEAJiShQCZlIgAmpWJAJqWigCbl4wAnZmOAJGR
        kQCVlZUAl5eXAJiYmACampoAqpaAAKyZhACtmoUArpuGAKKhmgCjopoAtaORALWkkgCjo6MApqamAKen
        pwCspKEAqqqqAKutqgCsr6wAsLCwALGxsQCwsrYAsLS0ALW1tQC7tLAAsrS4ALO1uQC0tLgAtLW5ALe1
        uAC3trkAtbe7ALm3uQCyuLoAuri6AL+/vwDAsqUAwbOmAMK0qADFuKwAwr+8ALjBxQC8xcwAvcjPAL7I
        0AC+ydEAv8rSAMHBwQDBwsYAzs7OAMHP3QDC0N4AxNHeAMbS3wDU1NQA1tbWANPV2wDa2toA3NvdAN3d
        3QDN1+IA0NjjANDZ5ADa3eMA4ODgAOTk5ADn5+cA6urqAOzs7ADu7u4ABwcHALS7vQC1vL8Aurq6ALy5
        uwC8vLwAwrOlAMW3qwDGuKwAxL26AMTAvgDOw7oA0ce+AIiowgCMq8QAj63FAJKvxwCYsskAt7/EALnB
        xgC6wsgAusTJALvFywC8xs0AvsjQAL/K0gC+y9oAwcHBAMXFxQDFxs0AycnJAM3NzQDVzMQA0dDPAMDM
        2wDR0dEA1NPSANXU0wDV1dUA2NbVAN7Y1QDZ2dkA3dzbAN3c3ADg29gA4NzcAOLe3QDg394AyNPgAMrU
        4ADM1eIA0NjkANTc5wDZ3uYA4t/gAODg4ADi4OAA4+LhAOLi4gDl4uEA5eTjAOTk5ADm5eQA5+XmAObm
        5gDo5eUA6ejnAOnp6QDr6ukA6urqAOzr6wDs7OwA7u3sAO3s7wDu7u4A5unwAOrt8wDt7fAA7/D0APHx
        8QD19fUA+fn5APz8/AABAQEAAAAAbm5ubm5ubm5ubm8AAAAzSFFTU1NTU1NTU1NQRhlJUKWjopiZmpmY
        mpujpKBHD42Wg4R7f4WFgIKBiIaeaxCMjpyfpqiqq6mnoZ2Xfm0RiyM1WltpdHZyZlY6IUJtEosbZ5U/
        ZVdYVUA3IBo8bRKLClplQWiJOjQqHg0HMm0Tiwl6czZ0fR4ODAgFAyVtFIsLeZ0+QzgrBgQBrAIsbRWL
        HDhEODk7Pj4rKjZAMm0Wih1FVFVXWFlaW1xdXDFsGGo9KC8uLSkoJyYkIh91SgAXUnFxcXFxcXFxcXFw
        SzAAAGJMTU1OT15fYGFjZAAAAAAAAAAAAAAAAAAAAAAAAOADAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAwAMAAP//AAA=
</value>
  </data>
</root>